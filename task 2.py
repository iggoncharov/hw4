import random
from abc import ABC, abstractmethod

class EmojiMixin:
    """
    Mixin –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç –≤ –∫–ª–∞—Å—Å–µ Pokemon –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
    poketype –Ω–∞ emogy
    """
    emogy = {'grass': 'üåø',
             'fire': 'üî•',
             'water': 'üåä',
             'electric': '‚ö°'}

    def __str__(self):
        poketype = super().__str__()
        if self.poketype in self.emogy:
            return poketype.replace(self.poketype, self.emogy[self.poketype])
        else:
            return poketype

class BasePokemon:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–æ–∫–µ–º–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç name –∏ poketype —á–µ—Ä–µ–∑ '/'
    """
    def __str__(self):
        return f'{self.name}/{self.poketype}'

class AnimeMon(ABC):
    """
    –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –∞–Ω–µ–º–æ–º–æ–Ω–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ 'inc_exp' –∏ —Å–≤–æ–π—Å—Ç–≤–æ 'exp'
    """
    @abstractmethod
    def inc_exp(self, value: int):
        pass

    @property
    @abstractmethod
    def exp(self):
        pass

class Pokemon(EmojiMixin, BasePokemon, AnimeMon):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–æ–∫–µ–º–æ–Ω–æ–≤, –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã: name, poketype
    –°–≤–æ–π—Å—Ç–≤–æ "exp" —Ö—Ä–∞–Ω–∏—Ç –æ–ø—ã—Ç
    –ú–µ—Ç–æ–¥ inc_exp —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–ø—ã—Ç –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ value
    """
    def __init__(self, name: str, poketype: str):
        self.name = name
        self.poketype = poketype
        self.__exp = 0

    @property
    def exp(self) -> int:
        return self.__exp

    @exp.setter
    def exp(self, new: int):
        self.__exp = new

    def inc_exp(self, value: int):
        self.exp += value

class Digimon(AnimeMon):
    """
    –ö–ª–∞—Å—Å –¥–∏–≥–∏–º–æ–Ω–æ–≤, –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç: name
    –°–≤–æ–π—Å—Ç–≤–æ "exp" —Ö—Ä–∞–Ω–∏—Ç –æ–ø—ã—Ç
    –ú–µ—Ç–æ–¥ inc_exp —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –æ–ø—ã—Ç –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ value * 8
    """
    def __init__(self, name: str):
        self.name = name
        self.__exp = 0

    @property
    def exp(self) -> int:
        return self.__exp

    @exp.setter
    def exp(self, new: int):
        self.__exp = new

    def inc_exp(self, value: int):
        self.exp += value * 8

def train(pokemon: AnimeMon):
    step_size, level_size = 10, 100
    sparring_qty = (level_size - pokemon.exp % level_size) // step_size
    for i in range(sparring_qty):
        win = random.choice([True, False])
        if win:
            pokemon.inc_exp(step_size)

if __name__ == '__main__':

    # –†–∞–±–æ—Ç–∞ –∫–ª–∞—Å—Å Pokemon
    print('–∫–ª–∞—Å—Å Pokemon:')
    bulbasaur = Pokemon(name='Bulbasaur', poketype='grass')
    print(bulbasaur.exp)
    train(bulbasaur)
    print(bulbasaur.exp)
    print()

    # –†–∞–±–æ—Ç–∞ –∫–ª–∞—Å—Å–∞ Digimon
    print('–∫–ª–∞—Å—Å Digimon:')
    dig = Digimon(name = 'Igor')
    print(dig.exp)
    train(dig)
    print(dig.exp)

